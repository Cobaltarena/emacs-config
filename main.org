#+TITLE: Emacs config using org-mode

** Init
*** Custom functions
Load some custom functions
#+begin_src emacs-lisp
(mapc 'load-file (directory-files "~/.emacs.d/emacs-config/lisp/" t "cb-custom.el"))
#+end_src
*** Bindings
Custom global bindings
#+begin_src emacs-lisp
(setq global-bindings
      (expand-file-name "emacs-config/global-bindings.org" user-emacs-directory))
(org-babel-load-file global-bindings)
#+end_src
** Startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1)) ; hide tool bar (GUI only)
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1)) ; hide scroll bar (GUI only)
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1)) ; hide menu bar
#+END_SRC
** Debug stacke trace on config error
#+BEGIN_SRC emacs-lisp
(setq debug-on-error t ; show stack trace on config error
      vc-follow-symlinks t) ; always follow symlink
#+END_SRC
** TODO Hooks
Some custom hooks that i should put elsewhere

*** Line-number

Customize them a bit more to make them easier to read
#+BEGIN_SRC emacs-lisp
(add-hook 'display-line-numbers-mode-hook
	  (lambda ()
	    (set-face-attribute 'line-number nil
				:weight 'normal)
	    (set-face-attribute 'line-number-current-line nil
				:foreground (face-attribute 'cursor :background)
				:weight 'bold
				:slant 'normal)
            )          )
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
    (add-hook 'c-mode-hook 'lsp)
    (add-hook 'cpp-mode-hook 'lsp)

    (with-eval-after-load 'lsp-mode
      (yas-global-mode)
      (require 'dap-cpptools)
  )

#+END_SRC
** Use-package
All the packages I'm using in my config.
*** Aggressive-indent
Make aggresive indent enabled on every mode except for html
(might configure it later) and bind 'C-x a' to toggle it or not

Github repository: [[https://github.com/Malabarba/aggressive-indent-mode]]
#+BEGIN_SRC emacs-lisp
    (use-package aggressive-indent
      :straight (aggressive-indent :type git :host github
                                   :repo "Malabarba/aggressive-indent-mode")
      :config
      (global-aggressive-indent-mode 1)
      (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
      (global-set-key (kbd "C-x a") 'aggressive-indent-mode)
      )
#+END_SRC
*** Clang-format
Clang-format because it's very handy

Github repository: [[https://github.com/sonatard/clang-format]]
#+BEGIN_SRC emacs-lisp
  (use-package clang-format
      :straight (clang-format :type git :host github
                                   :repo "sonatard/clang-format")
    )
#+END_SRC
*** Company-mode
Expand the dedicated org-file for company-mode and its dependencies
#+BEGIN_SRC emacs-lisp
(setq company-config
      (expand-file-name "emacs-config/company-init.org" user-emacs-directory))
(org-babel-load-file company-config)
#+END_SRC
*** Counsel

Github repository: [[https://github.com/abo-abo/swiper]] (part of ivy)
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :straight (swiper :type git :host github
                                   :repo "abo-abo/swiper")
    :config
    (counsel-mode 1)
    )
#+END_SRC

Github repository: https://github.com/ericdanan/counsel-projectile
#+BEGIN_SRC emacs-lisp
      (use-package counsel-projectile
        :straight (counsel-projectile :type git :host github
                                      :repo "ericdanan/counsel-projectile")
        :config
        (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
        (counsel-projectile-mode +1)
        )
#+END_SRC
*** Dap-mode
Super Handy debugging tool for many langages, uses lsp.

Github repository: https://github.com/emacs-lsp/dap-mode
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
        :straight (dap-mode :type git :host github
                                      :repo "emacs-lsp/dap-mode")
  :custom
  (lsp-enable-dap-auto-configure nil)
  :config
  (dap-ui-mode 1)
  )
  (global-unset-key (kbd "C-d"))
  (add-hook 'c++-mode-hook
            (lambda()
              (local-unset-key (kbd "C-d"))))
  (let ((bindings '(
                    ("C-a" . dap-ui-show-many-windows)
                    ("C-e" . dap-ui-hide-many-windows)
                    ("a" . dap-breakpoint-add)
                    ("d" . dap-breakpoint-delete)
                    ("c" . dap-breakpoint-delete-all)
                    ("n" . dap-next)
                    ("C-c" . dap-continue)
                    ("s" . dap-step-in)
                    ("r" . dap-step-out)
                    ("e" . dap-eval)
                    ("C-g" . dap-debug)
                    ("C-r" . dap-debug-restart)
                    ("g" . dap-debug-edit-template)
                    )))
    (dolist (binding bindings)
      (global-set-key (kbd (concat "C-d " (car binding))) (cdr binding))))
#+END_SRC
*** Dired
Expand the dedicated org-file for dired-mode and its dependencies
#+BEGIN_SRC emacs-lisp
(setq dired-config
      (expand-file-name "emacs-config/dired-init.org" user-emacs-directory))
(org-babel-load-file dired-config)
#+END_SRC
*** Doom-modeline
Better and prettier modeline. Mostly a copy paste from the README of the
github repository: https://github.com/seagle0128/doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight (doom-modeline :type git :host github
                                      :repo "seagle0128/doom-modeline")
    :init
    (doom-modeline-mode 1)
    :hook
    (after-init . doom-modeline-init)
    :config
    (setq doom-modeline-height 25)
    (setq doom-modeline-bar-width 3)
    (setq doom-modeline-window-width-limit fill-column)
    (setq doom-modeline-project-detection 'project)
    (setq doom-modeline-buffer-file-name-style 'relative-from-project)
    (setq doom-modeline-icon (display-graphic-p))
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-buffer-state-icon t)
    (setq doom-modeline-buffer-modification-icon t)
    (setq doom-modeline-minor-modes t)
    ;; (setq doom-modeline-enable-word-count t)
    (setq doom-modeline-buffer-encoding t)
    (setq doom-modeline-lsp t)
    (setq doom-modeline-before-update-env-hook nil)
    (setq doom-modeline-after-update-env-hook nil)
    )
#+END_SRC

*** Eterm-256color
Package to enhance the output of terminal emulators. 
Requires =ncurses= to be installed

Github repository: [[https://github.com/dieggsy/eterm-256color]]
#+BEGIN_SRC emacs-lisp
  (use-package eterm-256color
    :straight (eterm-256color :type git :host github
                                      :repo "dieggsy/eterm-256color")
    :hook
    (term-mode . eterm-256color-mode)
    (term-mode . eterm-256color-mode)
    (vterm-mode . eterm-256color-mode)
    (eshell-mode . eterm-256color-mode)
    )
#+END_SRC
*** Fixmee
A very handy TODO package

Github repository: [[https://github.com/rolandwalker/fixmee]]
#+BEGIN_SRC emacs-lisp
  (use-package button-lock
    :defer t
    :straight (button-lock :type git :host github
				  :repo "rolandwalker/button-lock"))
  (use-package fixmee
    :defer t
    :straight (fixmee :type git :host github
				  :repo "rolandwalker/fixmee")

    :config
    (global-fixmee-mode 1)
    )


  ;; fixmee-mode next/prev rebind and view list
  (global-set-key [f6] 'fixmee-goto-next-by-position)
  (global-set-key [f5] 'fixmee-goto-previous-by-position)
  (global-set-key [f4] 'fixmee-view-listing)

#+END_SRC
*** Gnus
A package to be able to read newsgroup using NNTP protocol

Github repository: [[https://github.com/espenhw/gnus]]
#+BEGIN_SRC emacs-lisp
  (use-package gnus
    :defer t
    :straight (gnus :type git :host github
                                :repo "espenhw/gnus")
    :config
    (setq gnus-select-method '(nntp "news.epita.fr"))
    )
#+END_SRC

*** Helm
I'm using helm-ctags to jump to the definition of function and helm-man to
get a quick access to man pages.
When I'll get more time, I'll try to customize my config a bit more with the
helm environment which look super handy to use.

Github repository: https://github.com/emacsorphanage/helm-gtags
#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :straight (helm-gtags :type git :host github
                                  :repo "emacsorphanage/helm-gtags")
    :config
    (helm-gtags-mode +1)
    (global-set-key (kbd "C-c r") 'helm-gtags-find-rtag)
    (global-set-key (kbd "C-c C-r") 'helm-gtags-find-tag-other-window)
    )
#+END_SRC
*** Highlight-defined
Package to make matching pattern with swiper highlighted

Github repository: https://github.com/Fanael/highlight-defined
#+BEGIN_SRC emacs-lisp
  (use-package highlight-defined
    :straight (highlight-defined :type git :host github
                                 :repo "Fanael/highlight-defined")
    :config
    (add-hook 'emacs-lisp-mode-hook 'highlight-defined-mode)
    )
#+END_SRC
*** Ivy
Super cool and easy to use major mode for completion when searching commands or
file.

Github repository: https://github.com/abo-abo/swiper
#+BEGIN_SRC emacs-lisp
(setq ivy-config
      (expand-file-name "emacs-config/ivy-init.org" user-emacs-directory))
(org-babel-load-file ivy-config)
#+END_SRC
*** Keycast
Fancy mode that displays the last shortcut used in emacs. Very handy
for memory mapping of the key combination

Github repository: https://github.com/tarsius/keycast
#+BEGIN_SRC emacs-lisp
  (use-package keycast
    :defer t
    :straight (keycast :type git :host github
                       :repo "tarsius/keycast")
    :config
    ;; found on https://github.com/tarsius/keycast/issues/7#issuecomment-627604064
    ;; since I had the same issue with enabling keycast
    (define-minor-mode keycast-mode
      "Show current command and its key binding in the mode line."
      :global t
      (if keycast-mode
          (add-hook 'pre-command-hook 'keycast--update t)
        (remove-hook 'pre-command-hook 'keycast--update)))
    (add-to-list 'global-mode-string '(mode-line-keycast ""))
    )


#+END_SRC

*** Magit
Magit is love, very handy and easy to learn and use when working with git.

Github repository: https://github.com/magit/magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight (magit :type git :host github
                     :repo "magit/magit")
    :config
    (global-set-key (kbd "C-c C-g") 'magit)
    )

  (use-package magit-todos
    :straight (magit-todos :type git :host github
                     :repo "alphapapa/magit-todos")
    :config
    (magit-todos-mode t)
    )

#+END_SRC
*** Markdown-mode
Major package to edit .md files

Github repository: https://github.com/jrblevin/markdown-mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :straight (markdown-mode :type git :host github
                     :repo "jrblevin/markdown-mode")

    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init
    (setq markdown-command "multimarkdown")
    )
#+END_SRC
*** Modern-sh
Minor mode for shell programming. Better highlight, auto indentation when saving
and smarter indent.

Github repository: https://github.com/damon-kwok/modern-sh
#+BEGIN_SRC emacs-lisp
  (use-package modern-sh
    :straight (modern-sh :type git :host github
                         :repo "damon-kwok/modern-sh")
    :config
    (add-hook 'sh-mode-hook 'modern-sh-mode)
    )
#+END_SRC
<<<<<<< Updated upstream

=======
>>>>>>> Stashed changes
*** Org-mode
Github repository: https://github.com/bzg/org-mode (mirror only)

#+BEGIN_SRC emacs-lisp
(setq org-config
      (expand-file-name "emacs-config/org-init.org" user-emacs-directory))
(org-babel-load-file org-config)
#+END_SRC
*** Python
Simple python configuration

Github repository: https://github.com/russell/python-mode
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
  :straight (python-mode :type git :host github
                       :repo "russell/python-mode")

    :hook (python-mode . lsp-deferred)
    :config
  (progn
    (setq dap-python-executable "python3"
          dap-python-debugger 'debugpy
          aggressive-indent-mode nil)
    (require 'dap-python))
  )

  (use-package sphinx-doc
    :ensure t
    :hook (python-mode . sphinx-doc-mode)
    :config
    )

  (use-package python-pytest
    :custom
    (python-pytest-confirm t))
#+END_SRC
*** Rust
Simple basic rust config

#+begin_src emacs-lisp
(use-package rustic
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

(defun rk/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm
  (setq-local buffer-save-without-query t))
#+end_src
*** Smooth-scrolling
Make the scrolling smoother

Github repository: https://github.com/aspiers/smooth-scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :straight (smooth-scrolling :type git :host github
                                :repo "aspiers/smooth-scrolling")

    :config
    (smooth-scrolling-mode t)
    )
#+END_SRC

*** Theme
This is the theme i like to use at the moment
Provide support to many packages including some like ivy, magit and company.

Github repository: [[https://github.com/NicolasPetton/zerodark-theme]]
#+BEGIN_SRC emacs-lisp
  (use-package zerodark-theme
    :straight (zerodark-theme :type git :host github
                       :repo "NicolasPetton/zerodark-theme")
    :init
    (setq zerodark-enlarge-headings nil
          zerodark-alternate-mode-line-and-minibuffer t)
    :config
    (load-theme 'zerodark t)
    )
#+END_SRC
*** Treemacs
Simple treemacs config because it is already marvelous 
out of the box

Github repository: https://github.com/Alexander-Miller/treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
  :defer t
  :config
  (global-set-key [f12] 'treemacs)
  (global-set-key (kbd "C-c i") 'treemacs-add-project-to-workspace)
  (unbind-key "s" treemacs-mode-map)
  (bind-key "s" #'treemacs-find-file treemacs-mode-map)
  )
#+END_SRC

*** Which-key
    #+begin_src emacs-lisp
      (use-package which-key
        :defer t
        :straight (which-key :type git :host github
                             :repo "justbur/emacs-which-key")

        :config

        (setq which-key-idle-delay 1
              which-key-show-prefix 'left
              which-key-idle-secondary-delay 0.5
              which-key-popup-type 'side-window
              which-key-side-window-location 'right
              which-key-show-early-on-C-h t
              which-key-show-major-mode t)
        (which-key-setup-side-window-bottom)
        (global-set-key (kbd "C-x w") 'which-key-show-top-level)
        (which-key-mode)
        )
    #+end_src
** Faces
*** Background
#+BEGIN_SRC emacs-lisp
(setq bg "#222222")
(set-background-color bg)
(set-face-attribute 'cursor nil :background "#DD7538")
#+END_SRC
*** Comments
#+BEGIN_SRC emacs-lisp
(set-face-foreground 'font-lock-string-face "light green")
(set-face-foreground 'font-lock-comment-face "green")
(set-face-foreground 'font-lock-comment-delimiter-face "green")
#+END_SRC
*** Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :family "MesloLGS NF"
                      :slant 'normal
                      :weight 'normal
                      :height 140
                      :width 'semi-condensed
                      )
#+END_SRC
*** Fringe
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'fringe nil :background bg)
(setq-default left-fringe-width 5)
#+END_SRC
*** Highlight mode
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
(set-face-attribute 'hl-line nil
                    :background "#580818")
#+END_SRC
*** Line number
Enable linum-mode and customize is a bit according to the theme
#+BEGIN_SRC emacs-lisp
(global-linum-mode) ; show line numbers
(set-face-attribute 'line-number nil :background bg)
(set-face-attribute 'line-number-current-line nil :background bg)
(set-face-attribute 'linum nil :background bg)
#+END_SRC
*** Line indicator (80 characters)
#+BEGIN_SRC emacs-lisp
(global-display-fill-column-indicator-mode 1)
(setq-default fill-column 80)
(set-face-attribute 'fill-column-indicator nil :foreground "#55342b")
(set-face-attribute 'fill-column-indicator nil :background "#55342b")
#+END_SRC
*** Whitespace and newline
Custom whitespace newline to make is easier to see.
Trailing whitespaces are also enabled
#+BEGIN_SRC emacs-lisp
  (global-whitespace-mode t)
(setq whitespace-display-mappings
      '(
        (newline-mark 10
                      [5321 10])
        (tab-mark 9
                  [9655 9]
                  [92 9])
        )
      )
(setq whitespace-style
      '(
        face ; show ...
        tabs tab-mark ; the tabulations,
        newline-mark
        newline
        trailing
        )
      )
  (set-face-attribute 'whitespace-newline nil :foreground "#A68064")
  (set-face-attribute 'whitespace-space nil :foreground "#A68064")
  (set-face-attribute 'whitespace-space nil :background bg)
#+END_SRC
** Utilities
*** Backup files
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/local/emacs_tf"))
      backup-by-copying t)
#+END_SRC
*** EPITA C basic config
#+BEGIN_SRC emacs-lisp
(setq c-basic-offset 4 ; spaces of indentation
      c-default-style "bsd" ; sort of fits the coding style
      fill-column 80) ; 80 columns rule
#+END_SRC
*** Tabulations
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq indent-tabs-mode nil)
#+END_SRC
*** Cursor-type
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'hollow)
(setq-default cursor-type 'box)
#+END_SRC
*** Parenthesis Highlight
    #+begin_src emacs-lisp
      (show-paren-mode 1)
      (setq show-paren-style 'expression)
      (set-face-attribute 'show-paren-match nil
                    :foreground "#00FFFF")
    #+end_src
