#+TITLE: Programming oriented config

* Direnv
#+begin_src emacs-lisp
(use-package direnv
  :straight (direnv :type git :host github
                      :repo "wbolster/emacs-direnv")
  :init
  (add-hook 'prog-mode-hook #'direnv-update-environment)
  :config
  (direnv-mode))
#+end_src
* LSP packages
** Eglot
#+begin_src emacs-lisp
(use-package eglot
  :straight (eglot :type git :host github
                   :repo "joaotavora/eglot")
  :config
  ;; TODO set this dynamically when this feature will be available https://github.com/joaotavora/eglot/discussions/967
  (setq-default eglot-workspace-configuration  '(
                                        (pylsp
                                         (plugins
                                          (black
                                           (enabled . t)
                                           (line_length . 95))
                                          (jedi_completion
                                           (enabled . t)
                                           (fuzzy . t))
                                          (flake8
                                           (enabled . t))
                                          (rope
                                           (enabled . t))
                                          (isort
                                           (enabled . t))
                                          ))

                                        ))

  (add-hook 'c++-mode-hook 'eglot-ensure)
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'go-mode 'eglot-ensure)
  (add-hook 'nix-mode-hook 'eglot-ensure)
  (add-hook 'python-mode-hook 'eglot-ensure)

  ;; LSP backends
  (add-to-list 'eglot-server-programs '(c++-mode . ("ccls")))
  (add-to-list 'eglot-server-programs '(c-mode . ("ccls")))
  (add-to-list 'eglot-server-programs '(cuda-mode . ("ccls")))
  (add-to-list 'eglot-server-programs '(nix-mode . ("rnix-lsp")))
  (add-to-list 'eglot-server-programs '(go-mode . ("gopls")))
  (add-to-list 'eglot-server-programs '(python-mode "pylsp" "-vvvvv" "--log-file" "/tmp/log"))

  (setq eglot-extend-to-xref t)

  ;; keybinds
  (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
  (define-key eglot-mode-map (kbd "C-c o") 'eglot-code-action-organize-imports)
  (define-key eglot-mode-map (kbd "C-c h") 'eldoc)
  (define-key eglot-mode-map (kbd "C-c s") 'xref-find-definitions)
  (define-key eglot-mode-map (kbd "C-c f") 'eglot-format)
  (define-key eglot-mode-map (kbd "C-c q") 'eglot-code-action-quickfix)

  ;; from https://github.com/joaotavora/eglot/discussions/898#discussioncomment-2609402
  ;; prioritize flymake reports on hover over eldoc ones
  (add-hook 'eglot-managed-mode-hook
            (lambda ()
              ;; Show flymake diagnostics first.
              (setq eldoc-documentation-functions
                    (cons #'flymake-eldoc-function
                          (remove #'flymake-eldoc-function eldoc-documentation-functions)))
              ;; Show all eldoc feedback.
              (setq eldoc-documentation-strategy #'eldoc-documentation-compose)))
  )

#+end_src
* Languages
** C/C++
*** ccls
LSP backend for c/c++
#+begin_src emacs-lisp
  (use-package ccls
    :straight (ccls :type git :host github
                    :repo "emacs-lsp/emacs-ccls")
    :config
    (setq ccls-executable "ccls")
    (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
    (setq ccls-initialization-options '(:index (:comments 2) :completion (:detailedLabel t)))
    )

  (c-set-offset 'substatement-open 0)


  (setq c++-tab-always-indent t)
  (setq c-basic-offset 4)
  (setq c-indent-level 4)

  (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
  (setq tab-width 4)

#+end_src
** Docker
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :straight (dockerfile-mode :type git :host github
                         :repo "spotify/dockerfile-mode")
  :mode "Dockerfile\\'"
  )
(use-package docker-compose-mode
  :straight (docker-compose-mode :type git :host github
                         :repo "meqif/docker-compose-mode")
  :mode "docker-compose.yml"
  )
#+end_src
** Go-mode
#+begin_src emacs-lisp
(use-package go-mode
  :straight (go-mode :type git :host github
                      :repo "dominikh/go-mode.el")
  :mode "\\.go\\'"
  :config
  (setq-default tab-width 3)
  )
#+end_src
** Nix-mode
#+begin_src emacs-lisp
(use-package nix-mode
  :straight (nix-mode :type git :host github
                      :repo "nixos/nix-mode")
  :mode "\\.nix\\'"
  )
#+end_src
** Python-mode
#+begin_src emacs-lisp
(use-package python
  :straight (python-mode :type git :host github
                         :repo "russell/python-mode")
  :mode ("\\.py\\'" . python-mode)
)
#+end_src
** Yaml-mode
#+begin_src emacs-lisp
(use-package yaml-mode
  :straight (yaml-mode :type git :host github
                       :repo "yoshiki/yaml-mode")
  :mode "\\.yml\\'"
  )
#+end_src
* Additional tools
** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :straight (yasnippet :type git :host github
                       :repo "joaotavora/yasnippet")
  :init
  (yas-global-mode 1)
  )

;; (use-package yasnippet-snippets
;;   :straight (yasnippet-snippets :type git :host github
;;                        :repo "AndreaCrotti/yasnippet-snippets")
;;   )

(use-package auto-yasnippet
  :straight (auto-yasnippet :type git :host github
                            :repo "abo-abo/auto-yasnippet")
  :config
  (global-set-key (kbd "H-w") #'aya-create)
  (global-set-key (kbd "H-y") #'aya-expand)
  )
#+end_src
