#+TITLE: Programming oriented config

* Direnv
#+begin_src emacs-lisp
(use-package direnv
  :straight (direnv :type git :host github
                      :repo "wbolster/emacs-direnv")
  :init
  (add-hook 'prog-mode-hook #'direnv-update-environment)
  :config
  (direnv-mode))
#+end_src
* LSP packages
** LSP
#+begin_src emacs-lisp
;; (use-package lsp-mode
;;   :straight (lsp-mode :type git :host github
;;                       :repo "emacs-lsp/lsp-mode")
;;   :config
;;   (global-unset-key (kbd "C-l"))
;;   (define-key lsp-mode-map (kbd "C-l") lsp-command-map)
;;   (flymake-mode-off)
;;   (setq lsp-enable-on-type-formatting nil
;;         lsp-lens-enable t
;;         lsp-prefer-flymake nil)
;;   :commands lsp
;;   )

;; (use-package lsp-ui
;;   :straight (lsp-ui :type git :host github
;;                     :repo "emacs-lsp/lsp-ui")
;;   :commands lsp-ui-mode
;;   )
#+end_src
** Eglot
#+begin_src emacs-lisp
(use-package eglot
  :straight (eglot :type git :host github
                      :repo "joaotavora/eglot")
  :config
  (add-to-list 'eglot-server-programs
             `(python-mode . ("pylsp" "-v" "--tcp" "--host"
                              "localhost" "--port" :autoport)))
  (setq eglot-extend-to-xref t)
  (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
  (define-key eglot-mode-map (kbd "C-c o") 'eglot-code-action-organize-imports)
  (define-key eglot-mode-map (kbd "C-c h") 'eldoc)
  (define-key eglot-mode-map (kbd "C-c s") 'xref-find-definitions)
  (define-key eglot-mode-map (kbd "C-c f") 'eglot-format)
  (define-key eglot-mode-map (kbd "C-c q") 'eglot-code-action-quickfix)
)

#+end_src
* Languages
** C/C++
*** ccls
LSP backend for c/c++
#+begin_src emacs-lisp
  (use-package ccls
    :straight (ccls :type git :host github
                    :repo "emacs-lsp/emacs-ccls")
;;    :hook ((c-mode c++-mode) . (lambda () (require 'ccls) (lsp)))
    :config
    (setq ccls-executable "ccls")
    (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
    (setq ccls-initialization-options '(:index (:comments 2) :completion (:detailedLabel t)))
    )

  (c-set-offset 'substatement-open 0)


  (setq c++-tab-always-indent t)
  (setq c-basic-offset 4)
  (setq c-indent-level 4)

  (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
  (setq tab-width 4)

#+end_src
** Javascript
#+begin_src emacs-lisp
  (use-package lsp-javascript
    :straight (lsp-javascript :type git :host github
                              :repo "purcell/lsp-javascript")
    ;;:hook ((js-mode-hook typescript-mode-hook) . (lambda () (lsp)))
    ;;:config
    ;;(add-to-list 'lsp-language-id-configuration '(js-mode . "ts-js"))
    )
#+end_src
** Nix-mode
#+begin_src emacs-lisp
(use-package nix-mode
  :straight (nix-mode :type git :host github
                      :repo "nixos/nix-mode")
  :mode "\\.nix\\'"
  )
#+end_src
** Python-mode
#+begin_src emacs-lisp
;; from https://github.com/joaotavora/eglot/discussions/967#discussion-4106601
(defun cb/run-command-in-directory (dir cmd &rest args)
  "Run a command in the specified directory. If the directory is nil, the directory of the file is used. The stdout result is trimmed of whitespace and returned."
  (let (
        (default-directory (or dir default-directory))
        (stdout-buffer (generate-new-buffer "tmp-stdout" t))
        (full-cmd (append '(call-process cmd nil (list stdout-buffer nil) nil) args))
        )
    (unwind-protect
        (let ((exit-status (condition-case nil (eval full-cmd) (file-missing nil))))
          (if (eq exit-status 0)
              (progn
                (with-current-buffer stdout-buffer
                  (string-trim (buffer-string))
                  )
                )
            )
          )
      (kill-buffer stdout-buffer)
      )
    )
  )

(defun locate-venv-poetry ()
  "Find a poetry venv."
  (cb/run-command-in-directory nil "poetry" "env" "info" "-p")
  )

(use-package python
  :mode ("\\.py\\'" . python-mode)
  :straight (python-mode :type git :host github
                         :repo "russell/python-mode")
  :hook (
         (python-mode . (lambda ()
                          (when (executable-find "poetry")
                            (let ((venv (locate-venv-poetry)))
                              (when venv
                                (setq-default eglot-workspace-configuration
                                              (list (cons ':python
                                                          (list ':venvPath venv
                                                                ':pythonPath (concat venv "/bin/python")))))
                                ))
                            )
                          (eglot-ensure)))
         )
  )
#+end_src
* Company
** Company-mode
Major mode for completion when programming.
#+BEGIN_SRC emacs-lisp
(use-package company
  :defer t
  :straight (company :type git :host github :repo "company-mode/company-mode")
  :hook ((company-mode-hook) .
         (lambda () (substitute-key-definition
                     'company-complete-common
                     'cb/company-yasnippet-or-completion
                     company-active-map)))
  :config
  (progn
    (setq company-selection-wrap-around +1
          company-tooltip-minimum-width 60
          company-tooltip-maximum-width 60)
    (define-key company-active-map (kbd "RET") nil)
    (define-key company-active-map (kbd "<return>") nil)
    (define-key company-active-map (kbd "<tab>") #'company-complete-selection)
    (define-key company-active-map (kbd "TAB") #'company-complete-selection)
    (global-set-key (kbd "C-c c") 'company-complete)
    )
  :custom-face
  (company-tooltip (
                    (t (:background "#332211")))
                   )
  )
#+END_SRC
** Prescient
Cool minor-mode to order the completion propositions by frequency of use.
#+BEGIN_SRC emacs-lisp
(use-package company-prescient
  :straight (presicent :type git :host github
                       :repo "raxod502/prescient.el")
  :after company
  :config
  (setq company-prescient-mode 1)
  )
#+END_SRC
** Company-jedi
Python backend for some completion when python-mode is enabled.
#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :defer t
  :straight (company-jedi :type git :host github
                          :repo "emacsorphanage/company-jedi")
  :hook ((python-mode-hook) . (jedi-mode))
  )
#+END_SRC
** Eval after load
#+BEGIN_SRC emacs-lisp
(cb/add-hooks 'company-mode (list #'c++-mode-hook
                                  #'c-mode-hook
                                  #'cider-mode-hook
                                  #'cider-repl-mode-hook
                                  #'emacs-lisp-mode-hook
                                  #'lisp-mode-hook
                                  #'nix-mode-hook
                                  #'org-mode-hook
                                  #'python-mode-hook
                                  #'rust-mode-hook))
#+END_SRC

** Company-lsp
#+begin_src emacs-lisp
(use-package company-lsp
  :straight (company-lsp :type git :host github
                         :repo "tigersoldier/company-lsp")
  :commands company-lsp
  :config
  (push 'company-lsp company-backends)
  ;; (push 'company-jedi company-backends)
  )
#+end_src

* Additional tools
** Clang-format
#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :straight (clang-format :type git :host github
                          :repo "sonatard/clang-format")
  :config
  ;;   (add-hook 'c++-mode-hook
  ;;       (lambda () (add-hook 'before-save-hook 'clang-format-region nil 'local)))
  ;;   (add-hook 'c-mode-hook
  ;;       (lambda () (add-hook 'before-save-hook 'clang-format-region nil 'local)))
  )
#+END_SRC

** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :straight (yasnippet :type git :host github
                       :repo "joaotavora/yasnippet")
  :init
  (yas-global-mode 1)
  )

;; (use-package yasnippet-snippets
;;   :straight (yasnippet-snippets :type git :host github
;;                        :repo "AndreaCrotti/yasnippet-snippets")
;;   )

(use-package auto-yasnippet
  :straight (auto-yasnippet :type git :host github
                            :repo "abo-abo/auto-yasnippet")
  :config
  (global-set-key (kbd "H-w") #'aya-create)
  (global-set-key (kbd "H-y") #'aya-expand)
  )
#+end_src
