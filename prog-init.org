#+TITLE: Programming oriented config

* LSP packages
** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight (lsp-mode :type git :host github
                   :repo "emacs-lsp/lsp-mode")
    :config
    (flymake-mode-off)
    :commands lsp
    )
  (use-package lsp-ui
    :straight (lsp-ui :type git :host github
                   :repo "emacs-lsp/lsp-ui")
    :commands lsp-ui-mode
    )
#+end_src
** Dap
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :straight (dap-mode :type git :host github
                        :repo "emacs-lsp/dap-mode")
    :custom
    (lsp-enable-dap-auto-configure nil)
    :hook ((c-mode c++-mode) .
           (lambda()
                (local-unset-key (kbd "C-d"))))
    :config
    (dap-ui-mode 1)
    (let ((bindings '(
                      ("C-a" . dap-ui-show-many-windows)
                      ("C-e" . dap-ui-hide-many-windows)
                      ("a" . dap-breakpoint-add)
                      ("d" . dap-breakpoint-delete)
                      ("c" . dap-breakpoint-delete-all)
                      ("n" . dap-next)
                      ("C-c" . dap-continue)
                      ("s" . dap-step-in)
                      ("r" . dap-step-out)
                      ("e" . dap-eval)
                      ("C-g" . dap-debug)
                      ("C-r" . dap-debug-restart)
                      ("g" . dap-debug-edit-template)
                      )))
      (dolist (binding bindings)
        (local-set-key (kbd (concat "C-d " (car binding))) (cdr binding))))
    )
#+END_SRC

* Languages
** C/C++
*** ccls
LSP backend for c/c++
#+begin_src emacs-lisp
  (use-package ccls
    :straight (ccls :type git :host github
                    :repo "MaskRay/ccls")
    :hook ((c-mode c++-mode) .
           (lambda () (require 'ccls) (lsp)))
    :config
    (setq ccls-executable "ccls")
    (setq lsp-prefer-flymake nil)
    (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
    )

#+end_src

** Nix-mode
#+begin_src emacs-lisp
    (use-package nix-mode
      :straight (nix-mode :type git :host github
                          :repo "nixos/nix-mode")
      :mode "\\.nix\\'"
      )
#+end_src

** Python-mode
#+BEGIN_SRC emacs-lisp
  (use-package python-mode
  :straight (python-mode :type git :host github
                       :repo "russell/python-mode")

    :hook (python-mode . lsp-deferred)
    :config
  (progn
    (setq dap-python-executable "python3"
          dap-python-debugger 'debugpy
          aggressive-indent-mode nil)
    (require 'dap-python))
  )

  ;; (use-package sphinx-doc
  ;;   :ensure t
  ;;   :hook (python-mode . sphinx-doc-mode)
  ;;   :config
  ;;   )

  ;; (use-package python-pytest
  ;;   :custom
  ;;   (python-pytest-confirm t))
#+END_SRC

* Company
** Company-mode
Major mode for completion when programming.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer t
    :straight (company :type git :host github :repo "company-mode/company-mode")
    :hook ((company-mode-hook) .
             (lambda () (substitute-key-definition
                                     'company-complete-common
                                     'cb/company-yasnippet-or-completion
                                     company-active-map)))
    :config
    (progn
    (setq company-selection-wrap-around +1
          company-tooltip-minimum-width 60
          company-tooltip-maximum-width 60)
    (define-key company-active-map (kbd "RET") nil)
    (define-key company-active-map (kbd "<return>") nil)
    (define-key company-active-map (kbd "<right>") #'company-complete-selection)
    (global-set-key (kbd "C-c c") 'company-complete)
    )
    :custom-face
    (company-tooltip (
                       (t (:background "#332211")))
                     )
    )
#+END_SRC
** Prescient
Cool minor-mode to order the completion propositions by frequency of use. 
#+BEGIN_SRC emacs-lisp
  (use-package company-prescient
    :straight (presicent :type git :host github
                   :repo "raxod502/prescient.el")
    :after company
    :config
    (setq company-prescient-mode 1)
    )
#+END_SRC
** Company-jedi
Python backend for some completion when python-mode is enabled.
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :defer t
    :straight (company-jedi :type git :host github
                            :repo "emacsorphanage/company-jedi")
    :hook ((python-mode-hook) . (jedi-mode))
    )
#+END_SRC
** Eval after load
#+BEGIN_SRC emacs-lisp
  (cb/add-hooks (list #'c++-mode-hook
                      #'c-mode-hook
                      #'cider-mode-hook
                      #'cider-repl-mode-hook
                      #'lisp-mode-hook
                      #'emacs-lisp-mode-hook
                      #'org-mode-hook
                      #'python-mode-hook
                      #'rust-mode-hook))
#+END_SRC

** Company-lsp
#+begin_src emacs-lisp
      (use-package company-lsp
        :straight (company-jedi :type git :host github
                                :repo "tigersoldier/company-lsp")
        :commands company-lsp
        :config
        (push 'company-lsp company-backends)
        (push 'company-jedi company-backends)
        )
#+end_src

* Additional tools
** Clang-format
#+BEGIN_SRC emacs-lisp
  (use-package clang-format
      :straight (clang-format :type git :host github
                              :repo "sonatard/clang-format")
    )
#+END_SRC

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight (yasnippet :type git :host github
                              :repo "joaotavora/yasnippet")
    :init
    (yas-global-mode 1)
    )

  (use-package yasnippet-snippets
    :straight (yasnippet-snippets :type git :host github
                         :repo "AndreaCrotti/yasnippet-snippets")
    )

  (use-package auto-yasnippet
    :straight (auto-yasnippet :type git :host github
                              :repo "abo-abo/auto-yasnippet")
    :config
    (global-set-key (kbd "H-w") #'aya-create)
    (global-set-key (kbd "H-y") #'aya-expand)
    )
#+end_src
