#+TITLE: Company-mode and its dependencies

** Company
Major mode for completion when programming.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer t
    :straight (company :type git :host github :repo "company-mode/company-mode")
    :config
    (add-to-list 'company-backends '(company-capf company-dabbrev))
    (progn
    (setq company-selection-wrap-around +1
          company-tooltip-minimum-width 60
          company-tooltip-maximum-width 60)
    (define-key company-active-map (kbd "RET") nil)
    (define-key company-active-map (kbd "<return>") nil)
    (define-key company-active-map (kbd "<right>") #'company-complete-selection)
    (global-set-key (kbd "C-c c") 'company-complete)
    )
    :custom-face
    (company-tooltip (
                       (t (:background "#332211")))
                     )
    )
#+END_SRC
** Prescient
Cool minor-mode to order the completion propositions by frequency of use. 
#+BEGIN_SRC emacs-lisp
  (use-package company-prescient
    :straight (presicent :type git :host github
                   :repo "raxod502/prescient.el")
    :after company
    :config
    (setq company-prescient-mode 1)
    )
#+END_SRC
** Company-jedi
Python backend for some completion when python-mode is enabled.
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :defer t
    :straight (company-jedi :type git :host github :repo "emacsorphanage/company-jedi")
    :config
    (progn
      (eval-after-load 'company
        '(add-to-list 'company-backends 'company-jedi ))
      (add-hook 'python-mode-hook 'jedi-mode)
      ))
#+END_SRC
** Eval after load
#+BEGIN_SRC emacs-lisp
  (cb/add-hooks (list #'c++-mode-hook
                      #'c-mode-hook
                      #'cider-mode-hook
                      #'cider-repl-mode-hook
                      #'lisp-mode-hook
                      #'emacs-lisp-mode-hook
                      #'org-mode-hook
                      #'python-mode-hook
                      #'rust-mode-hook))
#+END_SRC
