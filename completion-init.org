#+TITLE: Completion init

* Corfu
#+begin_src emacs-lisp
(use-package corfu
  :defer t
  :after eglot
  :straight (corfu :type git :host github :repo "minad/corfu")
  ;; Optional customizations
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-auto-prefix 1) ; number of characters to type before triggering corfu
  (corfu-auto-delay 0.0) ; no delay for completion
  (corfu-min-width 100)
  (corfu-max-width 100)
  (corfu-preview-current nil)
  (corfu-quit-at-boundary t)
  (tab-always-indent 'complete)
  (corfu-on-exact-match nil)
  :init
  (global-corfu-mode)
  :bind
  (:map corfu-map
        ("TAB" . corfu-complete)
        ([tab] . corfu-complete)
        )
  :config
  ;; Silence the pcomplete capf, no errors or messages!
  ;; Important for corfu
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
  )

(use-package kind-icon
  :after corfu
  :straight (kind-icon :type git :host github :repo "jdtsmith/kind-icon")
  :custom
  (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  :config
  (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
)

;; Optionally use the `orderless' completion style.
(use-package orderless
  :straight (orderless :type git :host github :repo "oantolin/orderless")
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(substring orderless flex)
        completion-category-defaults nil
        completion-category-overrides '(
                                        (file
                                         (styles . (partial-completion)))
                                        (eglot
                                         (styles . (orderless flex)))
                                        )))
#+end_src

* Cape
#+begin_src emacs-lisp
  (use-package cape
    :after corfu
    :straight (cape :type git :host github :repo "minad/cape")
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-symbol)
    (setq completion-at-point-functions
            (list (cape-capf-buster #'eglot-completion-at-point)))

  )

(use-package marginalia
  :straight (marginalia :type git :host github :repo "minad/marginalia")
  :init
  (marginalia-mode))
#+end_src
* Dabbrev
#+begin_src emacs-lisp
;; Use Dabbrev with Corfu!
(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand))
  ;; Other useful Dabbrev configurations.
  :custom
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'"))
  )
#+end_src
* Vertico
#+begin_src emacs-lisp
(use-package vertico
  :straight (vertico :type git :host github :repo "minad/vertico")
  :init
  ;;(vertico-mode)

  ;; Different scroll margin
  (setq vertico-scroll-margin 2)

  ;; Show more candidates
  (setq vertico-count 9)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)
  ;; (define-key vertico-map "?" #'minibuffer-completion-help)
  ;; (define-key vertico-map (kbd "M-TAB") #'minibuffer-force-complete-and-exit)
  )
#+end_src
